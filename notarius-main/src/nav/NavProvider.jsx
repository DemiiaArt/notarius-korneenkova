/**
 * React Context Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ API –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
 */

import React, { createContext, useState, useEffect } from 'react';
import { NAV_TREE } from './nav-tree';
import { apiClient } from '@/config/api';

export const NavContext = createContext({
  navTree: NAV_TREE,
  loading: false,
  error: null
});

/**
 * Provider –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –∏–∑ API –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
 */
export const NavProvider = ({ children }) => {
  const [navTree, setNavTree] = useState(NAV_TREE);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadDynamicNavigation = async () => {
      try {
        console.log('üîÑ NavProvider: Loading navigation from API...');
        setLoading(true);
        setError(null);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ API
        const apiData = await apiClient.get('/services/');
        console.log('‚úÖ NavProvider: API response received:', apiData);
        
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∫–æ—Ä–Ω–µ–º
        if (apiData && apiData.children) {
          console.log('‚úÖ NavProvider: Using API data');
          setNavTree(apiData);
        } else {
          console.warn('‚ö†Ô∏è NavProvider: API response invalid, using static nav');
          setNavTree(NAV_TREE);
        }
        
        setLoading(false);
      } catch (err) {
        console.error('‚ùå NavProvider: Error loading navigation:', err);
        setError(err.message);
        // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setNavTree(NAV_TREE);
        setLoading(false);
      }
    };

    loadDynamicNavigation();
  }, []);

  return (
    <NavContext.Provider value={{ 
      navTree, 
      loading, 
      error 
    }}>
      {children}
    </NavContext.Provider>
  );
};

