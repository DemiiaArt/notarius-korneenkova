import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination } from "swiper/modules";
import { Link, useLocation } from "react-router-dom";
import { useLang } from "@nav/use-lang";
import { buildFullPathForId, getLabel, findNodeById } from "@nav/nav-utils";
import { useHybridNav } from "@contexts/HybridNavContext";
import { useIsPC } from "@hooks/isPC";
import { useTranslation } from "@hooks/useTranslation";
import arrowRight from "@media/comments-carousel/arrow-right.svg";
import "./ServicesCarousel.scss";
import { BACKEND_BASE_URL } from "@/config/api";
// Import Swiper styles
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";

const ServicesCarousel = ({
  parentId, // ID –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–º—É –¥–µ—Ä–µ–≤—ñ
  title = "–ü–û–°–õ–£–ì–ò", // –ó–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å—Å—è
  showTitle = true,
  className = "",
  kind = "page",
}) => {
  const { currentLang } = useLang();
  const isPC = useIsPC();
  const location = useLocation();
  const { navTree, loading, error } = useHybridNav();
  const { t } = useTranslation("components.ServicesCarousel");

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const getTranslatedTitle = (originalTitle) => {
    const titles = t("titles");
    return titles && titles[originalTitle]
      ? titles[originalTitle]
      : originalTitle;
  };

  // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–∫—â–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞
  if (loading) {
    return (
      <div className={`services-carousel ${className}`}>
        <div className="container">
          <div style={{ textAlign: "center", padding: "20px" }}>
            {t("loading")}
          </div>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
  if (error || !navTree) {
    return null;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const getPageLevel = (pathname) => {
    const segments = pathname
      .split("/")
      .filter((segment) => segment.length > 0);
    return segments.length;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º —É—Ä–æ–≤–Ω–µ–º
  const isLastLevel = (pathname) => {
    const segments = pathname
      .split("/")
      .filter((segment) => segment.length > 0);
    // –ï—Å–ª–∏ –≤ –ø—É—Ç–∏ –µ—Å—Ç—å "secondLevel", —Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    return !pathname.includes("secondLevel");
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const currentPageLevel = getPageLevel(location.pathname);
  const isLastLevelPage = isLastLevel(location.pathname);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  // console.log("ServicesCarousel Level Debug:", {
  //   pathname: location.pathname,
  //   currentPageLevel,
  //   isLastLevelPage,
  //   originalParentId: parentId,
  //   originalKind: kind,
  // });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ nav-utils –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ—Ç–µ–π
  const findChildren = (node, targetId) => {
    const targetNode = findNodeById(node, targetId);
    return targetNode ? targetNode.children || [] : [];
  };

  // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
  let targetParentId = parentId;
  let targetKind = kind;

  // –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ services - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ServicesCarousel (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GroupServicesCarousel)
  // –ù–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è (secondLevel)
  if (
    (location.pathname === "/notarialni-poslugy" ||
      location.pathname === "/notary-services") &&
    !location.pathname.includes("secondLevel")
  ) {
    return null;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ 1 —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID –∏–∑ —Ö–µ–¥–µ—Ä–∞
  if (currentPageLevel === 1 || isLastLevelPage) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ö–µ–¥–µ—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    targetParentId = "root";
    targetKind = "custom"; // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è —Ö–µ–¥–µ—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  } else {
    // –î–ª—è 2 —É—Ä–æ–≤–Ω—è –∏ –¥–∞–ª–µ–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    targetParentId = parentId;
    targetKind = kind;
  }

  let visibleChildren = [];

  if (targetKind === "custom") {
    // –î–ª—è —Ö–µ–¥–µ—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    const headerServiceIds = [
      "services",
      "notary-translate",
      "other-services",
      "military-help",
    ];

    visibleChildren = headerServiceIds
      .map((id) => {
        const node = findChildren(navTree, "root").find(
          (child) => child.id === id
        );
        return node
          ? {
              id: node.id,
              kind: node.kind,
              label: node.label,
              showInMenu: node.showInMenu,
              cardImage: node.cardImage, // –î–æ–±–∞–≤–ª—è–µ–º card_image –∏–∑ merged –¥–µ—Ä–µ–≤–∞
            }
          : null;
      })
      .filter(
        (child) =>
          child &&
          child.showInMenu !== false &&
          child.label &&
          child.label[currentLang]
      );
  } else {
    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
    const children = findChildren(navTree, targetParentId) || [];

    visibleChildren = children.filter(
      (child) =>
        child &&
        child.kind === targetKind &&
        child.showInMenu !== false &&
        child.label && // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —î –ª–µ–π–±–ª
        child.label[currentLang]
    );
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ –ª–µ–π–±–ª –¥–ª—è –º–æ–≤–∏
  const getLabel = (node, lang) => {
    return (node?.label && node.label[lang]) || "";
  };

  // –û—Ç—Ä–∏–º—É—î–º–æ URL –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞
  const getUrl = (nodeId) => {
    return buildFullPathForId(navTree, nodeId, currentLang) || "#";
  };

  // –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ—Å–ª—É–≥–∏
  const getServiceImage = (service) => {
    // –Ø–∫—â–æ —î card_image –≤ –æ–±'—î–∫—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
    console.log("üñºÔ∏è ServicesCarousel - Getting image for service:", service);
    if (service?.cardImage) {
      return `${BACKEND_BASE_URL}${service.cardImage}`;
    }

    // Fallback - –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    return "/src/assets/media/services-carousel/ServicesGallery_notary.png";
  };

  if (visibleChildren.length === 0) {
    return null;
  }

  return (
    <div className={`services-carousel ${className}`}>
      <div className="container">
        <div className="services-carousel-container">
          {showTitle && (
            <h2 className="services-carousel-title">
              {getTranslatedTitle(title)}
            </h2>
          )}
        </div>
      </div>
      <div className="services-carousel-wrapper">
        <Swiper
          modules={[Navigation]}
          spaceBetween={isPC ? 10 : 4}
          slidesPerView={isPC ? 3 : 1.43}
          centeredSlides={false}
          navigation={{
            nextEl: ".services-carousel-next",
            prevEl: ".services-carousel-prev",
          }}
          className="services-carousel-swiper"
        >
          {visibleChildren.map((service, index) => (
            <SwiperSlide key={service.id}>
              <Link to={getUrl(service.id)} className="services-carousel-slide">
                <div className="services-carousel-image">
                  <img
                    src={getServiceImage(service)}
                    alt={getLabel(service, currentLang)}
                    loading="lazy"
                  />
                  <div className="services-carousel-overlay"></div>
                </div>
                <div className="services-carousel-content">
                  <h3
                    className={`services-carousel-label fw-semi-bold ${isPC ? "fs-p--28px" : "fs-p--18px"} c1`}
                  >
                    {getLabel(service, currentLang)}
                  </h3>
                </div>
              </Link>
            </SwiperSlide>
          ))}
        </Swiper>

        {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ —Å—Ç—Ä—ñ–ª–∫–∏ */}
        <button className="services-carousel-prev">
          <img src={arrowRight} alt="arrow-right" />
        </button>
        <button className="services-carousel-next">
          <img src={arrowRight} alt="arrow-right" />
        </button>
      </div>
    </div>
  );
};

export default ServicesCarousel;
