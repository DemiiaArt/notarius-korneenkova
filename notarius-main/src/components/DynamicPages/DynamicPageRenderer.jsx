import React from "react";
import { useParams } from "react-router-dom";
import { useHybridNav } from "@contexts/HybridNavContext";
import { useLanguage } from "@hooks/useLanguage";
import { detectLocaleFromPath } from "@nav/nav-utils";
import { getComponentById } from "@nav/component-registry";

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import ServiceGroupPage from "./ServiceGroupPage";
import ServiceDetailPage from "./ServiceDetailPage";
import DefaultThirdLevelPage from "@pagesSecondLevel/DefaultThirdLevelPage";
import DefaultFourthLevelPage from "@pagesSecondLevel/DefaultFourthLevelPage";

const DynamicPageRenderer = () => {
  const { navTree } = useHybridNav();
  const { slug1, slug2, slug3 } = useParams();
  const { currentLang } = useLanguage();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã (3-–π –∏–ª–∏ 4-–π —É—Ä–æ–≤–µ–Ω—å)
  const isDetailPage = !!slug3;

  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
  const findCurrentNode = () => {
    if (!navTree) return null;

    const findNodeBySlugs = (nodes, targetSlugs) => {
      for (const node of nodes) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º slug –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
        const nodeSlug = node.slug?.[currentLang];
        if (nodeSlug === targetSlugs[0]) {
          if (targetSlugs.length === 1) return node;
          if (node.children) {
            const child = findNodeBySlugs(node.children, targetSlugs.slice(1));
            if (child) return child;
          }
        }
      }
      return null;
    };

    const slugs = [slug1, slug2, slug3].filter(Boolean);
    return findNodeBySlugs(navTree.children, slugs);
  };

  const currentNode = findCurrentNode();

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log("üîç DynamicPageRenderer:");
  console.log("  - slug1:", slug1);
  console.log("  - slug2:", slug2);
  console.log("  - slug3:", slug3);
  console.log("  - currentLang:", currentLang);
  console.log("  - currentNode:", currentNode);

  if (!currentNode) {
    console.log("‚ùå currentNode is null - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return (
      <div className="dynamic-page-renderer">
        <div className="container">
          <h1>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
          <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
        </div>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ ID
  const ComponentFromRegistry = getComponentById(currentNode.id);

  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è ID:", currentNode.id);
  console.log("üîç ComponentFromRegistry:", ComponentFromRegistry);

  if (ComponentFromRegistry && ComponentFromRegistry !== null) {
    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞:", currentNode.id);
    return <ComponentFromRegistry />;
  }

  // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  console.log(
    "‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–ª—è:",
    currentNode.id
  );

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É slug'–æ–≤
  const slugCount = [slug1, slug2, slug3].filter(Boolean).length;

  if (slugCount >= 3) {
    // 4-–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –≤—ã—à–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º DefaultFourthLevelPage
    console.log("üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º DefaultFourthLevelPage –¥–ª—è 4+ —É—Ä–æ–≤–Ω—è");
    return (
      <DefaultFourthLevelPage
        title={currentNode.label?.[currentLang] || currentNode.id}
        heroImgClass="notaryServicesPage"
      />
    );
  } else if (slugCount === 2) {
    // 3-–π —É—Ä–æ–≤–µ–Ω—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º DefaultThirdLevelPage
    console.log("üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º DefaultThirdLevelPage –¥–ª—è 3-–≥–æ —É—Ä–æ–≤–Ω—è");
    return (
      <DefaultThirdLevelPage
        navId={currentNode.id}
        wrapperClassName="default-third-level-wrap"
      />
    );
  } else {
    // 1-–π —É—Ä–æ–≤–µ–Ω—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º ServiceGroupPage –∫–∞–∫ fallback
    console.log("üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º ServiceGroupPage –∫–∞–∫ fallback");
    return <ServiceGroupPage />;
  }
};

export default DynamicPageRenderer;
