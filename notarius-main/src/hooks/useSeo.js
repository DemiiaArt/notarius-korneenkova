import { useLocation } from "react-router-dom";
import { useLang } from "@nav/use-lang";
import { useHybridNav } from "@contexts/HybridNavContext";
import { findNodeById } from "@nav/nav-utils";

/**
 * –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Seo –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 */
export const useSeo = ({
  navId,
  title,
  description,
  ld,
  canonicalOverride,
}) => {
  const location = useLocation();
  const { currentLang } = useLang();
  const { navTree, loading, mergeComplete } = useHybridNav();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º routePath (–ø—É—Ç—å –±–µ–∑ –¥–æ–º–µ–Ω–∞)
  const routePath = location.pathname.startsWith("/")
    ? location.pathname.slice(1)
    : location.pathname;

  // –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª –≤ navTree –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω navId
  const nodeFromNavTree =
    navId && navTree ? findNodeById(navTree, navId) : null;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–≥–¥–∞ navTree –∑–∞–≥—Ä—É–∂–µ–Ω
  const navTreeLoaded = !loading && mergeComplete;

  console.log(`üîç useSeo hook state:`, {
    loading,
    mergeComplete,
    navTreeLoaded,
    navId,
    nodeFromNavTree: nodeFromNavTree ? "found" : "not found",
    routePath,
    currentLang,
  });

  return {
    title,
    description,
    lang: currentLang,
    routePath,
    navTreeLoaded,
    nodeFromNavTree,
    ld,
    canonicalOverride,
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ skeleton
    shouldShowSkeleton: !navTreeLoaded && navId, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º skeleton —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç navTree
  };
};
