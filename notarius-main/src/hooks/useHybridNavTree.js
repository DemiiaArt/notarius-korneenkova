import { useState, useEffect, useCallback } from "react";
import { NAV_TREE } from "../nav/nav-tree";
import { attachComponentsToTree } from "../nav/component-registry";
import { updateIndices } from "../nav/indices";

import { API_BASE_URL } from "../config/api";
// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
// const CHILDREN_CACHE_KEY = "nav_children_cache";
// const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –¥–µ—Ç–µ–π
// const saveChildrenToCache = (parentId, children) => {
//   try {
//     const cacheData = {
//       children,
//       timestamp: Date.now(),
//     };
//     localStorage.setItem(
//       `${CHILDREN_CACHE_KEY}_${parentId}`,
//       JSON.stringify(cacheData)
//     );
//   } catch (error) {
//     console.warn(`Failed to save children cache for ${parentId}:`, error);
//   }
// };

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–∞ –¥–µ—Ç–µ–π
// const getChildrenFromCache = (parentId) => {
//   try {
//     const cached = localStorage.getItem(`${CHILDREN_CACHE_KEY}_${parentId}`);
//     if (!cached) return null;

//     const { children, timestamp } = JSON.parse(cached);
//     const now = Date.now();

//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–µ—à
//     if (now - timestamp > CACHE_DURATION) {
//       localStorage.removeItem(`${CHILDREN_CACHE_KEY}_${parentId}`);
//       return null;
//     }

//     return children;
//   } catch (error) {
//     console.warn(`Failed to load children cache for ${parentId}:`, error);
//     localStorage.removeItem(`${CHILDREN_CACHE_KEY}_${parentId}`);
//     return null;
//   }
// };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å backend
const fetchAllServicesFromBackend = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/services/`);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ { value: [...] }
    let result = [];
    if (data && data.value && Array.isArray(data.value)) {
      result = data.value;
    } else if (Array.isArray(data)) {
      result = data;
    }

    return result;
  } catch (error) {
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–∑–ª–∞ –ø–æ ID –≤ –¥–µ—Ä–µ–≤–µ
const findNodeById = (nodes, targetId) => {
  for (const node of nodes) {
    if (node.id === targetId) {
      return node;
    }
    if (node.children && node.children.length > 0) {
      const found = findNodeById(node.children, targetId);
      if (found) return found;
    }
  }
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–µ–π —É–∑–ª–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ backend
const getChildrenByParentId = (backendTree, parentId) => {
  const parentNode = findNodeById(backendTree, parentId);
  return parentNode ? parentNode.children || [] : [];
};

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å backend –¥–∞–Ω–Ω—ã–º–∏
const mergeStaticWithBackendData = (staticTree, backendData) => {
  console.log("üîÑ Starting merge process...");
  console.log("üì¶ Static NAV_TREE:", staticTree);
  console.log("üåê Backend data:", backendData);

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É backend –¥–∞–Ω–Ω—ã—Ö –ø–æ ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const backendMap = {};
  const buildBackendMap = (nodes) => {
    if (Array.isArray(nodes)) {
      nodes.forEach((node) => {
        backendMap[node.id] = node;
        if (node.children) {
          buildBackendMap(node.children);
        }
      });
    }
  };

  buildBackendMap(backendData);
  console.log("üó∫Ô∏è Backend map created:", backendMap);

  const mergeNode = (node) => {
    const mergedNode = { ...node };

    // –ï—Å–ª–∏ –µ—Å—Ç—å backend –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ ID, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if (backendMap[node.id]) {
      const backendNode = backendMap[node.id];

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ backend (showMegaPanel, showInMenu, label, slug –∏ —Ç.–¥.)
      Object.keys(backendNode).forEach((key) => {
        if (key !== "children") {
          // –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª–µ component –∏–∑ backend,
          // —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–µ—Å—Ç—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
          if (key === "component") {
            return;
          }
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º card_image –≤ cardImage (camelCase)
          if (key === "card_image") {
            mergedNode.cardImage = backendNode[key];
            console.log(
              `‚úÖ Merging node "${node.id}": cardImage =`,
              backendNode[key]
            );
          } else {
            mergedNode[key] = backendNode[key];
          }
        }
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º children –æ—Ç–¥–µ–ª—å–Ω–æ
      if (backendNode.children) {
        mergedNode.children = [...backendNode.children];
      }
    } else if (node.children) {
      // –ò–Ω–∞—á–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–µ–π
      mergedNode.children = node.children.map(mergeNode);
    }

    return mergedNode;
  };

  const result = mergeNode(staticTree);
  console.log("‚ú® Merge complete! Final result:", result);
  return result;
};

export const useHybridNavTree = () => {
  const [navTree, setNavTree] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [backendTree, setBackendTree] = useState([]);
  const [backendLoaded, setBackendLoaded] = useState(false);
  const [mergeComplete, setMergeComplete] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NAV_TREE –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  if (!NAV_TREE) {
    throw new Error("NAV_TREE is not properly imported");
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞
  useEffect(() => {
    try {
      setLoading(true);
      setError(null);

      // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É –¥–µ—Ä–µ–≤—É
      let staticTreeWithComponents;
      try {
        staticTreeWithComponents = attachComponentsToTree(NAV_TREE);
      } catch (componentError) {
        staticTreeWithComponents = NAV_TREE; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞
      try {
        updateIndices(NAV_TREE);
      } catch (indexError) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
      }

      setNavTree(staticTreeWithComponents);
    } catch (err) {
      setError(err.message);
      setNavTree(NAV_TREE); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    } finally {
      setLoading(false);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å backend
  const loadBackendTree = useCallback(async (forceRefresh = false) => {
    // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    // if (!forceRefresh) {
    //   const cachedTree = getChildrenFromCache("backend_tree");
    //   if (cachedTree) {
    //     console.log("üì¶ Using cached backend tree:", cachedTree);
    //     setBackendTree(cachedTree);
    //     setBackendLoaded(true);
    //     return cachedTree;
    //   }
    // }

    try {
      const tree = await fetchAllServicesFromBackend();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setBackendTree(tree);
      setBackendLoaded(true);

      // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
      // saveChildrenToCache("backend_tree", tree);

      return tree;
    } catch (error) {
      throw error;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å backend –¥–∞–Ω–Ω—ã–º–∏
  const mergeWithBackendData = useCallback(
    async (forceRefresh = false) => {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º backend –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ –ø–æ–ª–∞–≥–∞—è—Å—å –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const freshBackendData = await loadBackendTree(forceRefresh);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ —Å backend –¥–∞–Ω–Ω—ã–º–∏
        const mergedTree = mergeStaticWithBackendData(
          NAV_TREE,
          freshBackendData
        );

        // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º—É –¥–µ—Ä–µ–≤—É
        const treeWithComponents = attachComponentsToTree(mergedTree);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setNavTree(treeWithComponents);
        setMergeComplete(true);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        updateIndices(mergedTree);

        return treeWithComponents;
      } catch (err) {
        setError(err.message);
        throw err;
      }
    },
    [loadBackendTree]
  );

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å backend –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    let isMounted = true;

    const loadAndMergeBackendData = async () => {
      if (!isMounted) return;

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å backend
        await mergeWithBackendData();
      } catch (error) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –º–æ–ª—á–∞
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ —É—Å–ø–µ–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    const timeoutId = setTimeout(loadAndMergeBackendData, 100);

    return () => {
      isMounted = false;
      clearTimeout(timeoutId);
    };
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  const clearCache = useCallback(() => {
    // localStorage.removeItem(`${CHILDREN_CACHE_KEY}_backend_tree`);

    setBackendTree([]);
    setBackendLoaded(false);
    setMergeComplete(false);

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const staticTreeWithComponents = attachComponentsToTree(NAV_TREE);
    setNavTree(staticTreeWithComponents);
    updateIndices(NAV_TREE);
  }, []);

  return {
    navTree,
    loading,
    error,
    clearCache,
    mergeWithBackendData,
    backendTree,
    backendLoaded,
    mergeComplete,
  };
};
