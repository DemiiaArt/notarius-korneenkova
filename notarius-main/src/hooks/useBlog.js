/**
 * Hook –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–≥–æ–º
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞ –∏–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */

import { useState, useEffect, useCallback } from "react";
import { useLanguage } from "@hooks/useLanguage";
import { apiClient } from "@/config/api";

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞
 * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @param {number} options.page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {string} options.category - Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * @returns {Object} { articles, categories, loading, error, totalPages, totalCount, fetchArticles }
 */
export const useBlog = ({ page = 1, category = null } = {}) => {
  const { currentLang } = useLanguage();
  const [articles, setArticles] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totalPages, setTotalPages] = useState(1);
  const [totalCount, setTotalCount] = useState(0);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
   * @param {boolean} forceRefresh - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –±–ª–æ–≥–∞
   */
  const fetchArticles = useCallback(
    async (forceRefresh = false) => {
      try {
        setLoading(true);
        setError(null);

        // –§–æ—Ä–º–∏—Ä—É–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const params = new URLSearchParams({
          lang: currentLang,
          page: page.toString(),
        });

        // –î–æ–±–∞–≤–ª—è–µ–º category —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –∏ –Ω–µ 'all'
        if (category && category !== "all") {
          params.append("category", category);
        }

        const url = `/blog/notarialni-blog/?${params.toString()}`;
        console.log("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª–æ–≥:", url);

        const data = await apiClient.get(url);

        console.log("‚úÖ –ë–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω:", data);
        console.log("üìä –ü–∞–≥–∏–Ω–∞—Ü–∏—è:", {
          count: data.count,
          currentPage: page,
          hasNext: !!data.next,
          hasPrevious: !!data.previous,
          articlesInResponse:
            data.results?.posts?.length || data.results?.length || 0,
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if (data.results && data.results.posts) {
          // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ posts
          setArticles(data.results.posts || []);
          setCategories(data.results.categories || []);
          setTotalCount(data.count || 0);

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ URL –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
          let calculatedPages = 1;
          if (data.next || data.previous) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º page_size –∏–∑ URL next/previous
            let pageSize = 6; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ BlogPagination

            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å page_size –∏–∑ URL
            try {
              const url = new URL(data.next || data.previous);
              const urlPageSize = url.searchParams.get("page_size");
              if (urlPageSize) {
                pageSize = parseInt(urlPageSize);
              }
            } catch (e) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }

            calculatedPages = Math.ceil((data.count || 0) / pageSize);
            console.log(
              `üìÑ –†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü: count=${data.count}, pageSize=${pageSize}, totalPages=${calculatedPages}`
            );
          }
          setTotalPages(calculatedPages);
        } else if (data.results && Array.isArray(data.results)) {
          // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç–∞—Ç–µ–π
          setArticles(data.results || []);
          setCategories(data.categories || []);
          setTotalCount(data.count || 0);

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ URL –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
          let calculatedPages = 1;
          if (data.next || data.previous) {
            let pageSize = 6; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ BlogPagination

            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å page_size –∏–∑ URL
            try {
              const url = new URL(data.next || data.previous);
              const urlPageSize = url.searchParams.get("page_size");
              if (urlPageSize) {
                pageSize = parseInt(urlPageSize);
              }
            } catch (e) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }

            calculatedPages = Math.ceil((data.count || 0) / pageSize);
            console.log(
              `üìÑ –†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞): count=${data.count}, pageSize=${pageSize}, totalPages=${calculatedPages}`
            );
          }
          setTotalPages(calculatedPages);
        } else {
          // Fallback
          setArticles([]);
          setCategories([]);
          setTotalCount(0);
          setTotalPages(1);
        }

        return data;
      } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (err.status === 404) {
          console.warn("useBlog: 404 - blog not found in DB");
          setArticles([]);
          setCategories([]);
          setTotalCount(0);
          setTotalPages(1);
          setError(null);
          return { results: { posts: [], categories: [] }, count: 0 };
        }

        const errorMessage = err.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±–ª–æ–≥—É";
        setError(errorMessage);
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–ª–æ–≥–∞:", err);

        setArticles([]);
        setCategories([]);
        setTotalCount(0);
        setTotalPages(1);
        throw err;
      } finally {
        setLoading(false);
      }
    },
    [currentLang, page, category]
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    fetchArticles();
  }, [fetchArticles]);

  return {
    articles,
    categories,
    loading,
    error,
    totalPages,
    totalCount,
    fetchArticles,
  };
};

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞
 * @param {string} slug - slug —Å—Ç–∞—Ç—å–∏
 * @returns {Object} { article, loading, error, fetchArticle }
 */
export const useBlogArticle = (slug) => {
  const { currentLang } = useLanguage();
  const [article, setArticle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ slug
   * @param {string} articleSlug - slug —Å—Ç–∞—Ç—å–∏
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
   */
  const fetchArticle = useCallback(
    async (articleSlug) => {
      if (!articleSlug) {
        setError("Slug —Å—Ç–∞—Ç—å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω");
        setLoading(false);
        return null;
      }

      try {
        setLoading(true);
        setError(null);

        // –§–æ—Ä–º–∏—Ä—É–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const params = new URLSearchParams({
          lang: currentLang,
        });

        const url = `/blog/notarialni-blog/${articleSlug}/?${params.toString()}`;
        console.log("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å—é:", url);

        const data = await apiClient.get(url);

        console.log("‚úÖ –°—Ç–∞—Ç—å—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:", data);
        setArticle(data);

        return data;
      } catch (err) {
        const errorMessage = err.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ";
        setError(errorMessage);
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏:", err);

        setArticle(null);
        throw err;
      } finally {
        setLoading(false);
      }
    },
    [currentLang]
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ slug
  useEffect(() => {
    if (slug) {
      fetchArticle(slug);
    }
  }, [slug, fetchArticle]);

  return {
    article,
    loading,
    error,
    fetchArticle,
  };
};

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 *
 * // –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
 * const { articles, loading, error } = useBlog();
 *
 * // –û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è
 * const { article, loading, error } = useBlogArticle('slug-stati');
 */
